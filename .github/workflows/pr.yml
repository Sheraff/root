name: Pull Request Workflow

on:
  workflow_dispatch:
  pull_request:
  push:
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: 🐙 Test
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        node-version: [20.x]
        pnpm-version: [8.x]

    env:
      PNPM_STORE_PATH: . # will be overwritten by the action

    timeout-minutes: 5

    steps:
      - name: 🍃 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: ⚙️ Node setup ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          check-latest: true

      - name: ⚙️ Pnpm setup ${{ matrix.pnpm-version }}
        uses: pnpm/action-setup@v3
        with:
          version: ${{ matrix.pnpm-version }}
          run_install: false

      - name: 📁 Get pnpm store directory
        shell: bash
        run: echo "PNPM_STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 📦 Cache .pnpm-store
        uses: actions/cache@v4
        timeout-minutes: 1
        with:
          path: ${{ env.PNPM_STORE_PATH }}
          key: ${{ runner.os }}-${{ matrix.pnpm-version }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-${{ matrix.pnpm-version }}-pnpm-store-

      - name: 📦 Cache .turbo
        uses: actions/cache@v4
        timeout-minutes: 1
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: 🧰 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🙈 Create env file
        run: echo "${{ secrets.CI_ENV_FILE }}" > .env

      - name: 🔮 Type checking
        timeout-minutes: 1
        run: |
          echo "::remove-matcher owner=tsc::"
          STEP_NAME="🔮 Type checking"
          node --import tsx script/src/stdout/tsc.ts pnpm tsc --cache-dir=.turbo

      - name: 🎓 Spell checking
        timeout-minutes: 1
        run: |
          STEP_NAME="🎓 Spell checking"
          node --import tsx script/src/stdout/spell.ts pnpm spell --cache-dir=.turbo

      - name: 🎨 Formatting
        timeout-minutes: 1
        run: |
          STEP_NAME="🎨 Formatting"
          node --import tsx script/src/stdout/format.ts pnpm format --cache-dir=.turbo

      - name: 💫 Linting
        timeout-minutes: 1
        run: |
          echo "::remove-matcher owner=eslint-compact::"
          echo "::remove-matcher owner=eslint-stylish::"
          STEP_NAME="💫 Linting"
          node --import tsx script/src/stdout/lint.ts pnpm lint --cache-dir=.turbo

      - name: 👻 Dead code elimination
        timeout-minutes: 1
        run: |
          STEP_NAME="👻 Dead code elimination"
          node --import tsx script/src/stdout/knip.ts pnpm knip

      - name: 🚦 Unit testing
        timeout-minutes: 1
        run: |
          STEP_NAME="🚦 Unit testing"
          node --import tsx script/src/stdout/test.ts pnpm test:ci

      - name: 🏗️ Building
        id: build
        timeout-minutes: 1
        run: pnpm build

      - name: 🚀 Releasing
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && steps.build.outcome == 'success'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Creating a release..."
          version=`node -pe "require('./package.json').version"`
          echo "Version: v$version"
          gh release delete "v$version" --yes && echo "Deleting existing release..." || true
          tar -cJf bundle.tar.xz ./dist ./package.json ./pnpm-lock.yaml ./pnpm-workspace.yaml .nvmrc .env.example
          gh release create "v$version" bundle.tar.xz --generate-notes
          echo "Release created!"

      - name: 🏷️ Versioning
        if: github.ref != 'refs/heads/main'
        run: |
          echo "Checking version..."
          git fetch origin main:main --force --depth=1
          git show main:package.json > .main-package.json
          node --import tsx script/src/versioning.ts "🏷️ Versioning" .main-package.json package.json
          rm .main-package.json
