name: Pull Request Workflow

on:
  workflow_dispatch:
  pull_request:
  push:
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: 🐙 Test
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        node-version: [20.x, 21.x]
        pnpm-version: [8.x]

    timeout-minutes: 5

    steps:
      - name: 🍃 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: ⚙️ Setup
        uses: ./.github/setup
        timeout-minutes: 1
        with:
          node-version: ${{ matrix.node-version }}
          pnpm-version: ${{ matrix.pnpm-version }}
          env: ${{ secrets.CI_ENV_FILE }}

      - name: 🔮 Type checking
        timeout-minutes: 1
        run: |
          echo "::remove-matcher owner=tsc::"
          STEP_NAME="🔮 Type checking"
          node --import tsx script/src/stdout/tsc.ts pnpm tsc --cache-dir=.turbo

      - name: 🎓 Spell checking
        timeout-minutes: 1
        run: |
          STEP_NAME="🎓 Spell checking"
          node --import tsx script/src/stdout/spell.ts pnpm spell --cache-dir=.turbo

      - name: 🎨 Formatting
        timeout-minutes: 1
        run: |
          STEP_NAME="🎨 Formatting"
          node --import tsx script/src/stdout/format.ts pnpm format --cache-dir=.turbo

      - name: 💫 Linting
        timeout-minutes: 1
        run: |
          echo "::remove-matcher owner=eslint-compact::"
          echo "::remove-matcher owner=eslint-stylish::"
          STEP_NAME="💫 Linting"
          node --import tsx script/src/stdout/lint.ts pnpm lint --cache-dir=.turbo

      - name: 👻 Dead code elimination
        timeout-minutes: 1
        run: |
          STEP_NAME="👻 Dead code elimination"
          node --import tsx script/src/stdout/knip.ts pnpm knip

      - name: 🚦 Unit testing
        timeout-minutes: 1
        run: |
          STEP_NAME="🚦 Unit testing"
          node --import tsx script/src/stdout/test.ts pnpm test:ci

      - name: 🏷️ Versioning
        if: github.ref != 'refs/heads/main'
        run: |
          echo "Checking version..."
          git fetch origin main:main --force --depth=1
          git show main:package.json > .main-package.json
          node --import tsx script/src/versioning.ts "🏷️ Versioning" .main-package.json package.json
          rm .main-package.json

  release:
    name: 🚀 Release
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && needs.test.result == 'success'

    steps:
      - name: 🍃 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: ⚙️ Setup
        uses: ./.github/setup
        timeout-minutes: 1
        with:
          node-version: 20.x
          pnpm-version: 8.x
          env: ${{ secrets.CI_ENV_FILE }}

      - name: 🏗️ Building
        id: build
        timeout-minutes: 1
        run: pnpm build

      - name: 🚀 Releasing
        if: steps.build.outcome == 'success'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Creating a release..."
          version=`node -pe "require('./package.json').version"`
          echo "Version: v$version"
          gh release delete "v$version" --yes && echo "Deleting existing release..." || true
          tar -cJf bundle.tar.xz ./dist ./package.json ./pnpm-lock.yaml ./pnpm-workspace.yaml .nvmrc .env.example
          gh release create "v$version" bundle.tar.xz --generate-notes
          echo "Release created!"
